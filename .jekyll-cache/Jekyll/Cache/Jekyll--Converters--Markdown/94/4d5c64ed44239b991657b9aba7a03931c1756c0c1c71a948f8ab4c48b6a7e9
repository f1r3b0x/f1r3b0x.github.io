I"¶<p>Al acceder a un servidor remoto lo normal es que sea como usuarios no privilegiados, lo que no nos brinda acceso completo a la m√°quina. Para conseguir el acceso completo, necesitamos
encontrar una vulnerabilidad interna que nos permita escalar nuestros privilegios al usuario <code class="language-plaintext highlighter-rouge">root</code> en <code class="language-plaintext highlighter-rouge">Linux</code> o el <code class="language-plaintext highlighter-rouge">administrador/SYSTEM</code> en <code class="language-plaintext highlighter-rouge">Windows</code>.<br />
Veamos algunos m√©todos comunes para hacerlo.</p>

<h3 id="chuletas-privesc"><a href="#header-1"></a>Chuletas PrivEsc</h3>

<p>Podemos encontrar instrucciones y chuletas en l√≠nea que tienen una colecci√≥n de instrucciones que podemos seguir y los comandos para seguirlas. Algunos recursos interesantes son
‚ÄúHackTricks‚Äù y ‚ÄúPayloadsAllTheThings‚Äù. Lo mejor que podemos hacer es experimentar con estas t√©cnicas para escalar nuestros privilegios.</p>

<h3 id="scripts-de-enumeraci√≥n"><a href="#header-2"></a><em>Scripts</em> de enumeraci√≥n</h3>

<p>Muchos de los comandos mencionados se pueden lanzar autom√°ticamente con un <em>script</em> para buscar vulnerabilidades. Algunos de los <em>scripts</em> de enumeraci√≥n para Linux incluyen
‚ÄúLinEnum‚Äù y ‚Äúlinuxprivchecker‚Äù, y para Windows incluyen ‚ÄúSeatbelt‚Äù y ‚ÄúJAWS‚Äù.</p>

<p>Otra herramienta para esto es la ‚ÄúPrivilege Escalation Awesome SUITE (PEASS)‚Äù, que se mantiene al d√≠a en cuanto a <em>scripts</em> para enumeraci√≥n en Linux y Windows.</p>

<p><strong>Importante:</strong> algunos de estos <em>scripts</em> pueden hacer mucho ‚Äúruido‚Äù que puede llamar la atenci√≥n del anti-virus o del <em>software</em> de seguridad que monitoriza este tipo de eventos.
Por lo que en ocasiones, nos puede interesar realizar la enumeraci√≥n de forma manual.</p>

<h3 id="exploits-del-n√∫cleo-kernel"><a href="#header-3"></a><em>Exploits</em> del N√∫cleo (<em>Kernel</em>)</h3>

<p>Cuando encontramos un servidor que usa un sistema operativo antiguo, debemos buscar las vulnerabilidades pontenciales del <em>kernel</em>. Si el servidor no se mantiene con las √∫ltimas
actualizaciones y parches, es probable que sea vulnerable a <em>exploits</em> espec√≠ficos del <em>kernel</em> encontrados en versiones no parcheadas de Linux y Windows.</p>

<p>Podemos buscar en Google o usar <code class="language-plaintext highlighter-rouge">searchsploit</code> la versi√≥n del n√∫cleo, como por ejemplo el <code class="language-plaintext highlighter-rouge">DirtyCow</code> en Linux 3.9.0-73-generic.</p>

<p>Esto funciona de la misma forma en Windows. Adem√°s, es importante tener en cuenta que los <em>exploits</em> del n√∫cleo pueden causar inestabilidad en el sistema, por lo que es importante
tener cuidado si los usamos en sistemas en producci√≥n. Lo mejor es probarlos en entornos controlados como laboratiorios, y ejecutarlos √∫nicamente en sistemas en producci√≥n con
la aprovaci√≥n expl√≠cita de nuestro cliente.</p>

<h3 id="software-vulnerable"><a href="#header-4"></a>Software Vulnerable</h3>

<p>Otra cosa a mirar es el software instalado. En Linux podemos verlo con el comando <code class="language-plaintext highlighter-rouge">dpkg -l</code> o mirar en <code class="language-plaintext highlighter-rouge">C:\Program Files</code> en Windows para ver el software instalado. Luego debemos
buscar <em>exploits</em> p√∫blicos para cualquier sistema instalado, sobre todo si hay versiones antiguas en uso.</p>

<h3 id="privilegios-de-usuario"><a href="#header-5"></a>Privilegios de Usuario</h3>

<p>Otro aspecto cr√≠tico que mirar despu√©s de ganar acceso a un servidor son los privilegios de que dispone el usuario al que tenemos acceso. Suponinedo que tengamos permitido lanzar
comandos espec√≠ficos como <em>root</em> (o otro usuario). En ese caso, quiz√° podamos escalar nuestros privilegios a usuarios <em>root/system</em> o ganar acceso como otro usuario. Algunas maneras
t√≠pcas de explotar algunos privilegios de usuario son:</p>
<ol>
  <li>Sudo</li>
  <li>SUID</li>
  <li>Windows Token Privileges</li>
</ol>

<p>El comando <code class="language-plaintext highlighter-rouge">sudo</code> de Linux permite a un usuario ejecutar comandos como si fuera otro. En ocasiones se permite a usuarios no privilegiados ejecutar comandos como <em>root</em> sin darles
acceso al usuario <em>root</em>. Normalmente se hace para lanzar comandos espec√≠ficos que s√≥lo se puden lanzar como <em>root</em> (como <code class="language-plaintext highlighter-rouge">tcpdump</code>) o permitir al usuario acceder a ciertos
directorios ra√≠z. Podemos mirar los privilegios que nos da <code class="language-plaintext highlighter-rouge">sudo</code> con <code class="language-plaintext highlighter-rouge">sudo -l</code>.<br />
Con <code class="language-plaintext highlighter-rouge">sudo su -</code> podemos cambiar al usuario <em>root</em>.<br />
Si al hacer <code class="language-plaintext highlighter-rouge">sudo -l</code> vemos una entrada con <code class="language-plaintext highlighter-rouge">NOPASSWD</code>, significa que podemos ejecutar ese comando sin contrase√±a con <code class="language-plaintext highlighter-rouge">sudo -u &lt;usuario&gt; /bin/echo Hello World!</code>.</p>

<p>Al encontrar una aplicaci√≥n particular que podamos lanzar con <code class="language-plaintext highlighter-rouge">sudo</code>, miraremos formas de explotarla para ganar un int√©rprete como <em>root</em>. P√°ginas como ‚ÄúGTFOBins‚Äù o ‚ÄúLOLBAS‚Äù pueden
ayudarnos con esta tarea.</p>

<h3 id="tareas-programadas"><a href="#header-6"></a>Tareas Programadas</h3>

<p>Tanto en Linux como en Windows hay m√©todos para tener <em>scripts</em> corriendo, en int√©rvalos de tiempo espec√≠ficos, para llevar a cabo una tarea. Por ejemplo tener un antivirus
realizando un escaneo cada hora. Suele haber 2 maneras de utilizar las tareas programadas (Windows) o trabajos cr√≥nicos (Linux) para escalar nuestros privilegios:</p>
<ol>
  <li>A√±adir nuevas tareas programadas/trabajos cr√≥nicos</li>
  <li>Trucarlas para ejecutar software malicioso</li>
</ol>

<p>La forma m√°s sencilla es comprobar si tenemos permitido a√±adir tareas programadas nuevas. En Linux, una forma de mantener tareas programadas es mediante <code class="language-plaintext highlighter-rouge">Cron Jobs</code>. Hay directorios
espec√≠ficos que quiz√° podemos usar para a√±adir nuevos trabajos cr√≥nicos si tenemos permisos de escritura sobre ellos. Se incluyen:</p>
<ol>
  <li>/etc/crontab</li>
  <li>/etc/cron.d</li>
  <li>/var/spool/cron/crontabs/root</li>
</ol>

<p>Si podemos escribir en un directorio llamado por un trabajo cr√≥nico, escribiremos un <em>bash script</em> con un int√©rprete de comandos inverso, cuyo trabajo ser√° enviarnos una terminal al
ser ejecutado.</p>

<h3 id="credenciales-expuestas"><a href="#header-7"></a>Credenciales Expuestas</h3>

<p>El siguiente paso ser√° buscar archivos y mirar si contienen credenciales expuestas. Es muy com√∫n que las haya en archivos de configuraci√≥n, archivos de registro y archivos de
historial de usuarios (<code class="language-plaintext highlighter-rouge">bash_history</code> ‚Äì&gt; Linux y <code class="language-plaintext highlighter-rouge">PSReadLine</code> ‚Äì&gt; Windows). Los <em>scripts</em> de enumeraci√≥n mencionados anteriormente suelen buscar contrase√±as potenciales en los
archivos por nosotros.</p>

<p>Al encontrar una contrase√±a deberemos utilizarla para iniciar sesi√≥n en el servicio correspondiente y contemplar la posibilidad de que el usuario haya reutilizado la misma
credencial como contrase√±a de <em>root</em>.<br />
Tambi√©n podemos usar las credenciales para iniciar sesi√≥n por <code class="language-plaintext highlighter-rouge">ssh</code> en el servidor como ese usuario.</p>

:ET
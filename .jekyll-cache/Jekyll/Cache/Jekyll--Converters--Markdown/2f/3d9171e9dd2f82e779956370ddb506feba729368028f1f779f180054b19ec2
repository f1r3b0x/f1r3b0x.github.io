I"Ä<h2 id="terminolog√≠a-m√°s-com√∫n"><a href="#header-1"></a>Terminolog√≠a m√°s com√∫n</h2>

<p>B√°sicamente nos hablan de lo b√°sico para guiarnos en nuestros primeros pasos por <em>Hack The Box</em>.</p>

<h3 id="qu√©-es-un-shellterminal"><a href="#header-2"></a>¬øQu√© es un <em>Shell</em>/Terminal?</h3>

<p>En un sistema Linux, un terminal es un programa que interact√∫a con el usuario a trav√©s de comandos introducidos mediante el teclado y los pasa al sistema operativo (SO).
Anta√±o era la √∫nica manera de comunicarse con los SOs, pero con el tiempo fueron surgiendo versiones gr√°ficas o GUIs (<em>Graphic User Interfaces</em>). Estas complementan a las interfaces de 
comandos, pues son m√°s intuitivas para los usuarios comunes pero mucho menos potentes para aquellos con m√°s dominio del sistema.</p>

<p>Los sistemas Linux pueden operar con diversos terminales, como:</p>
<ul>
  <li>Bash (<em>Bourne Again Shell</em>), el terminal por defecto de la mayor√≠a de distros de Linux, evoluci√≥n del cl√°sico sh de Unix</li>
  <li>Zsh, la cual utilizar√© yo por ahora en nuestra m√°quina <em>Parrot</em></li>
  <li>Tcsh</li>
  <li>Ksh</li>
  <li>Fish shell</li>
  <li>Etc‚Ä¶</li>
</ul>

<p>Tambi√©n podemos leer acerca de la expresi√≥n ‚Äú<em>getting a shell</em>‚Äù en referencia a una caja o sistema. Lo que se pretende decir con esto, es que hemos obtenido acceso a nivel de terminal
y podemos lanzar comandos de forma interactiva como si tuvi√©ramos la sesi√≥n iniciada en el objetivo. Esto se puede conseguir explotando alguna vulnerabilidad de un servicio o aplicaci√≥n web
o obteniendo las credenciales para acceder al objetivo de forma remota.</p>

<p>Hay 3 tipus de conexiones a un <em>shell</em>:</p>
<ul>
  <li><em>Reverse shell</em>: Se inicia una conexi√≥n a modo de ‚Äúescucha‚Äù en nuestra m√°quina atacante.</li>
  <li><em>Bind shell</em>: Se ‚Äúata‚Äù a un puerto espec√≠fico del objetivo y se espera a una conexi√≥n desde nuestra m√°quina.</li>
  <li><em>Web shell</em>: Se lanzan comandos de SO mediante el navegador web, de forma no interactiva o semi-interactiva. Esto nos deja abierta la posibilidad de jugar con una vulnerabilidad de
             subida de fichero, subiendo un script en lenguaje PHP para lanzar un √∫nico comando.</li>
</ul>

<p>Cadauno de estos terminales tiene sus casos de uso, igual que no s√≥lo podemos apoyarnos en programas escritos en PHP para obtener acceso al terminal. Los lenguajes pueden ser tan diversos
(Python, Bash, Java, C, etc.) como la complejidad y longitud del <em>script</em> utilizado.</p>

<h3 id="-qu√©-es-un-puerto"><a href="#header-3"></a> ¬øQu√© es un Puerto?</h3>

<p>Los puertos son puntos virtuales donde las conexiones de red empiezan y acaban. Para una mayor claridad, un puerto se podr√≠a ver como una ventana o puerta a una casa. Para nosotros
son de gran importancia, pues una ventana abierta o mal cerrada nos puede permitir el acceso a la vivienda.    <br />
El SO es el encargado de manejar los puertos y se asocian a procesos o servicios espec√≠ficos y permiten a los ordenadores diferenciar entre los diversos tipos de tr√°fico.</p>

<p>A cada puerto se le asigna un n√∫mero, estando la mayor√≠a estandarizados en todos los dispositivos con conexi√≥n a Internet. Esto no quiere decir que un servicio no pueda ser reconfigurado
para redirigirse por otro puerto.</p>

<p>Hay 2 tipos de puertos:</p>
<ul>
  <li>Protocolo de control de transmisi√≥n (TCP): orientado a conexi√≥n, lo que significa que una conexi√≥n entre el cliente y el servidor debe ser establecida antes de poder enviar datos.
El servidor debe estar en modo de escucha, esperando las solicitudes de conexi√≥n por parte de los clientes.</li>
  <li>Protocolo de datagramas de usuario (UDP): usa un modelo de comunicaci√≥n independiente de la conexi√≥n. No requiere que se haya establecido conexi√≥n cliente-servidor como en el caso del
TCP. Evidentemente por s√≠ s√≥lo no garantiza la entrega de la informaci√≥n, por lo que es √∫til cuando no se requiere comprovar la conexi√≥n o ya lo hace la aplicaci√≥n. Esto hace interesante
al UDP cuando la aplicaci√≥n que lo usa funciona a tiempo real. Pues las comprobaciones del TCP ralentizan la entrega de paquetes.</li>
</ul>

<p>Hay 65.535 puertos TCP y 65.535 puertos UDP diferentes. Algunos de los puertos m√°s conocidos son:</p>

<html>
<table>
<head>
<tr>
<th>Puertos</th>
<th>Categor√≠a</th>
<th>Protocolo</th>
</tr>
</head>
<body>
<tr>
<td>20/21</td>
<td>TCP</td>
<td>FTP</td>
</tr>
<tr>
<td>22</td>
<td>TCP</td>
<td>SSH</td>
<tr>
<td>23</td>
<td>TCP</td>
<td>Telnet</td> 
</tr>
<tr>
<td>25</td>
<td>TCP</td>
<td>SMTP</td> 
</tr>
<tr>
<td>80</td>
<td>TCP</td>
<td>HTTP</td> 
</tr> 
<tr>
<td>161</td>
<td>TCP/UDP</td>
<td>SNMP</td> 
</tr>
<tr>
<td>389</td>
<td>TCP/UDP</td>
<td>LDAP</td> 
</tr>
<tr>
<td>443</td>
<td>TCP</td>
<td>SSL/TLS (HTTPS)</td> 
</tr>
<tr>
<td>445</td>
<td>TCP</td>
<td>SMB</td> 
</tr>
<tr>
<td>3389</td>
<td>TCP</td>
<td>RDP</td> 
</tr>
</tr></body></table></html>
:ET